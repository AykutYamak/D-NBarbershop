@model DNBarbershop.Models.ViewModels.Appointments.AppointmentEditViewModel
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body class="crudOperationsView">
    <div class="container mt-3 d-flex justify-content-center mb-3">
        <div class="card shadow-lg border-0 rounded-4 overflow-hidden">
            <div class="card-header bg-dark text-white py-4">
                <h3 class="text-center mb-0">Редактирай час</h3>
            </div>
            <div class="card-body p-4 p-md-5">
                <form method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="UserId">

                    <div class="mb-4">
                        <h5 class="form-label fw-bold mb-3 pb-2 border-bottom border-2">
                            Избери услуги
                        </h5>
                        <div class="row row-cols-1 row-cols-md-3 g-3 mb-2">
                            @foreach (var service in @Model.Services)
                            {
                                <div class="col">
                                    <div class="service-card h-100">
                                        <input type="checkbox"
                                               name="SelectedServiceIds"
                                               value="@service.Id"
                                               class="btn-check"
                                               id="service_@service.Id"
                                        @(Model.SelectedServiceIds.Contains(service.Id) ? "checked" : "")>
                                        <label class="btn btn-outline-dark position-relative h-100 w-100 d-flex flex-column align-items-center justify-content-between p-3"
                                               for="service_@service.Id">
                                            <span class="position-relative top-0 end-0 badge w-50 bg-dark m-2" style="font-size:120%;">
                                                @service.Price лв.
                                            </span>
                                            <span class="service-name fw-bold fs-5 mb-2">@service.ServiceName</span>
                                            <div class="service-duration mt-2 d-flex align-items-center">
                                                <i class="bi bi-clock me-1"></i>
                                                <span>@service.Duration</span>
                                            </div>
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="row mt-4">
                        <!-- Barber Selection -->
                        <div class="col-md-3 mb-3">
                            <h5 class="form-label fw-bold mb-3 pb-2 border-bottom border-2">
                                Бръснар
                            </h5>
                            <select asp-for="BarberId" asp-items="ViewBag.Barbers"
                                    class="form-select shadow-sm rounded-3 py-2" id="barberSelect" disabled>
                            </select>
                        </div>

                        <!-- Date Selection -->
                        <div class="col-md-3 mb-3">
                            <h5 class="form-label fw-bold mb-3 pb-2 border-bottom border-2">
                                Дата
                            </h5>
                            <input type="date" asp-for="AppointmentDate"
                                   class="form-control shadow-sm rounded-3 py-2" required
                                   value="@Model.AppointmentDate.ToString("yyyy-MM-dd")"
                                   min="@DateTime.Now.ToString("yyyy-MM-dd")" id="dateInput">
                            <span class="text-danger">@Html.ValidationMessageFor(m => m.AppointmentDate)</span>
                        </div>

                        <!-- Time Selection -->
                        <div class="col-md-3 mb-3">
                            <h5 class="form-label fw-bold mb-3 pb-2 border-bottom border-2">
                                Час
                            </h5>
                            <select asp-for="AppointmentTime" class="form-select shadow-sm rounded-3 py-2" id="timeSelect">
                                @if (ViewBag.TimeSlots != null && ViewBag.TimeSlots.Count > 0)
                                {
                                    @foreach (var item in (List<SelectListItem>)ViewBag.TimeSlots)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                                else
                                {
                                    <option value="">Няма свободни часове</option>
                                }
                            </select>
                            <span class="text-danger">@Html.ValidationMessageFor(m => m.AppointmentTime)</span>
                        </div>

                        <!-- Status Selection -->
                        <div class="col-md-3 mb-3">
                            <h5 class="form-label fw-bold mb-3 pb-2 border-bottom border-2">
                                Статус
                            </h5>
                            <select asp-for="Status" class="form-select shadow-sm rounded-3 py-2">
                                @foreach (var item in ViewBag.Statuses)
                                {
                                    <option value="@item.Value" selected="@(item.Value == Model.Status.ToString() ? "selected" : null)">@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="text-center mt-4 pt-3">
                        <button type="submit" asp-action="Edit" asp-controller="Appointment"
                                class="btn btn-dark btn-lg px-5 py-3 shadow-lg rounded-pill">
                            Запази
                        </button>
                        <a asp-action="Index" class="btn btn-outline-dark btn-lg px-5 py-3 ms-2 shadow-lg rounded-pill">Отказ</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                const barberSelect = document.getElementById("barberSelect");
                const dateInput = document.getElementById("dateInput");
                const timeSelect = document.getElementById("timeSelect");
                const errorText = document.getElementById("dateError");
                const serviceCheckboxes = document.querySelectorAll("input[name='SelectedServiceIds']");

                // Disable weekends and past dates
                function disableWeekendsAndPast(event) {
                    const selectedDate = new Date(event.target.value);
                    const dayOfWeek = selectedDate.getDay(); // 0 = Sunday, 6 = Saturday
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);

                    if (dayOfWeek === 0 || selectedDate < today) {
                        event.target.value = "";
                        errorText.classList.remove("d-none");
                    } else {
                        errorText.classList.add("d-none");
                    }
                }

                // Calculate total duration of selected services
                function calculateTotalDuration() {
                    let totalDuration = 0;
                    serviceCheckboxes.forEach(checkbox => {
                        if (checkbox.checked) {
                            const serviceDuration = checkbox.closest(".service-card").querySelector(".service-duration span").textContent;
                            const [hours, minutes] = serviceDuration.split(":").map(Number);
                            totalDuration += hours * 60 + minutes;
                        }
                    });
                    return totalDuration;
                }

                // Update available time slots based on selections
                async function updateAvailableTimeSlots() {
                    const selectedBarber = barberSelect.value;
                    const appointmentDate = dateInput.value;
                    const totalDurationMinutes = calculateTotalDuration();

                    console.log("Selected Barber:", selectedBarber);
                    console.log("Appointment Date:", appointmentDate);
                    console.log("Total Duration (minutes):", totalDurationMinutes);

                    if (!selectedBarber || !appointmentDate || totalDurationMinutes === 0) {
                        timeSelect.innerHTML = '<option value="">Избери си час от тук!</option>';
                        return;
                    }

                    try {
                        const response = await fetch(`/Appointment/GetAvailableTimeSlots?barberId=${selectedBarber}&appointmentDate=${appointmentDate}&totalDurationMinutes=${totalDurationMinutes}`);
                        if (!response.ok) {
                            throw new Error("Грешка при зареждане на свободните часове.");
                        }
                        const availableSlots = await response.json();

                        console.log("Available Slots:", availableSlots);

                        // Clear and populate the dropdown with available slots
                        timeSelect.innerHTML = '<option value="">Избери си час от тук!</option>';
                        availableSlots.forEach(slot => {
                            const option = document.createElement("option");
                            option.value = slot;
                            option.textContent = slot; // Already formatted as "hh:mm" from backend
                            timeSelect.appendChild(option);
                        });

                        // Optional: Add a note for Saturday
                        const selectedDate = new Date(appointmentDate);
                        if (selectedDate.getDay() === 6) { // Saturday
                            console.log("Saturday selected: Showing slots from 10:00 to 15:00");
                        }
                    } catch (error) {
                        console.error("Error fetching available time slots:", error);
                        timeSelect.innerHTML = '<option value="">Грешка при зареждане на свободните часове.</option>';
                    }
                }

                // Attach event listeners
                barberSelect.addEventListener("change", updateAvailableTimeSlots);
                dateInput.addEventListener("change", function (event) {
                    disableWeekendsAndPast(event);
                    updateAvailableTimeSlots();
                });
                serviceCheckboxes.forEach(checkbox => checkbox.addEventListener("change", updateAvailableTimeSlots));

                // Initialize form
                disableWeekendsAndPast({ target: dateInput });
                const today = new Date().toISOString().split('T')[0];
                dateInput.setAttribute('min', today);

                // Update time slots on initial load if barber and date are selected
                if (barberSelect.value && dateInput.value) {
                    updateAvailableTimeSlots(); // Call this function on page load
                }

                // Add visual feedback when services are selected
                serviceCheckboxes.forEach(checkbox => {
                    checkbox.addEventListener("change", function() {
                        const serviceCards = document.querySelectorAll(".service-card label");
                        serviceCards.forEach(card => {
                            if (card.classList.contains("selected-service")) {
                                card.classList.remove("selected-service");
                            }
                        });

                        // Count selected services
                        let selectedCount = 0;
                        serviceCheckboxes.forEach(cb => {
                            if (cb.checked) {
                                selectedCount++;
                                document.querySelector(`label[for="${cb.id}"]`).classList.add("selected-service");
                            }
                        });

                        // Update total duration and price display if needed
                        const totalDuration = calculateTotalDuration();
                        console.log(`Selected services: ${selectedCount}, Total duration: ${totalDuration} minutes`);
                    });
                });
            });
        </script>

        <style>
            .card h3 {
                font-family: "Abril Fatface,serif";
            }

            .card h5 {
                font-family: "Abril Fatface,serif";
            }
            .card-header h3 {
                font-family: "Abril Fatface", serif;
                letter-spacing: 1px;
                text-transform: uppercase;
            }
            /* Include all custom styles from Create view */
            .selected-service {
                background-color: #e9ecef !important;
                border-color: #0d6efd !important;
            }

            .btn-dark {
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
            }

                .btn-dark::before {
                    content: "";
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.2) 50%, transparent 100%);
                    transition: left 0.7s ease;
                }

                .btn-dark:hover::before {
                    left: 100%;
                }
            /* Other styles... */
        </style>
    }
</body>
</html>